include_directories(./)


macro(add_kerbal_inst_target target target_src_file)
    add_library(${target} OBJECT ${file})
    set_target_properties(${target} PROPERTIES CMAKE_CURRENT_BINARY_DIR ./targets)
    if (KERBAL_TEST_USE_LIBCXX)
        target_compile_options(${target} PUBLIC -stdlib=libc++)
    endif ()
    set(inst_targets ${inst_targets} ${target})
endmacro()


function(add_kerbal_sub_lib sublib)
    message("add sublib: ${sublib}")
    aux_source_directory(./${sublib} files)
    foreach (file ${files})
        string(REGEX MATCH "./${sublib}/(.+)\\.inst\\.cpp$" _ ${file})
        if (CMAKE_MATCH_1)
            set(target inst.${sublib}.${CMAKE_MATCH_1})
            message("	add: ${target} <= ${file}")
            add_kerbal_inst_target(${target} ${file})
            set(inst_targets ${inst_targets} PARENT_SCOPE)
        else ()
            message(WARNING "   ${file} has been ignored")
        endif ()
    endforeach ()
    message("")
endfunction()

add_kerbal_sub_lib(algorithm)
add_kerbal_sub_lib(any)
add_kerbal_sub_lib(autonm)
add_kerbal_sub_lib(bitset)
add_kerbal_sub_lib(compare)
add_kerbal_sub_lib(container)
add_kerbal_sub_lib(hash)
add_kerbal_sub_lib(memory)
add_kerbal_sub_lib(numeric)
add_kerbal_sub_lib(optional)
add_kerbal_sub_lib(utility)

message("\n")

set(inst_targets_count 0)
foreach (target ${inst_targets})
    message("inst-target ${inst_targets_count}: ${target}")
    math(EXPR inst_targets_count "${inst_targets_count} + 1")
endforeach ()
message("inst targets: ${inst_targets_count}")
message("\n")
